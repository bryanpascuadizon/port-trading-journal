// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Portfolio {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String   @db.Uuid
  name          String
  description   String
  broker        String
  accountNumber Int
  isDefault     Boolean
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Trades Trades[]
}

model Trades {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String   @db.Uuid
  portfolioId   String   @db.Uuid
  symbol        String
  position      String
  entryDate     DateTime @default(now()) @db.Timestamp(6)
  exitDate      DateTime @default(now()) @db.Timestamp(6)
  entryPrice    Decimal  @default(0) @db.Decimal(12, 2)
  exitPrice     Decimal  @default(0) @db.Decimal(12, 2)
  lotSize       Decimal  @default(0) @db.Decimal(12, 2)
  pnl           Decimal  @default(0) @db.Decimal(12, 2)
  screenshotUrl String
  screenshotId  String
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?
  email          String?     @unique(map: "user_email_idx")
  username       String      @unique(map: "user_username_idx")
  hashedPassword String?
  emailVerified  DateTime?
  createdAt      DateTime    @default(now()) @db.Timestamp(6)
  updatedAt      DateTime    @updatedAt
  Account        Account[]
  Session        Session[]
  Portfolio      Portfolio[]
  Trades         Trades[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
